import time
import logging

from aiogram import Bot, Dispatcher, executor, types

from db import Database
import AllTextMusic
import InformationAboutMusician

logging.basicConfig(level=logging.INFO)
TOKEN = "5824921460:AAFzNlAZcumMRl4vVz2XUUiM6g9gXC_v57c"
Id_First_Administrator = 1913377793

bot = Bot(token=TOKEN)
dp = Dispatcher(bot=bot)
db = Database('database.db')


@dp.message_handler(commands=['start'])
async def start_handler(messege: types.Message):
    user_id = messege.from_user.id
    user_full_name = messege.from_user.full_name
    print("–ò–Ω—Ñ–æ–º–∞—Ü–∏—è –æ —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–¥–∫–ª—é—á–∏–≤—à–µ–º—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:")
    logging.info(f'{user_id=} {user_full_name=}, {time.asctime()}')

    await messege.answer(f"–ü—Ä–∏–≤–µ—Ç, {user_full_name}!")
    time.sleep(1)
    await messege.answer("–ú—ã –±–∞–Ω–¥–∞ —Ä–µ–ø–µ—Ä–æ–≤ –∏ —Ç—Ä–∞—Ö–∞–µ–º —Ç–µ–ª–µ—á–µ–∫ 	üîû \n"
                         "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è –º–æ–≥—É –Ω–∞–ø–∏—à–∏ –∏–ª–∏ –Ω–∞–∂–º–∏ /help –∏ –ø–æ–ª—å–∑—É–π—Å—è –ø—Ä–æ—Å—Ç–æ–π –º–µ–Ω—é—à–∫–æ–π\n"
                         "–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –Ω–∞—Å –≤ –≤–∫ https://vk.com/hlnaddo181411502 üåê")

    if messege.chat.type == 'private':
        if not db.user_exists(user_id):
            db.add_user(user_id, user_full_name)


@dp.message_handler(commands="help")
async def help_handler(message: types.Message):
    await message.answer(
        "–ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã, —á—Ç–æ —Ç—ã –∑–∞ –Ω–∞–º–∏ —Å–ª–µ–¥–∏—à—å, –º—ã –∑–∞ —Ç–æ–±–æ–π —Ç–æ–∂–µ, –Ω–∞–¥–µ—é—Å—å —Ç—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –Ω–∞—à—É –≥—Ä—É–ø–ø—É")
    kb = [
        [
            types.KeyboardButton(text="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–µ—Å–µ–Ω üéµ"),
            types.KeyboardButton(text="–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã üë™"),
            types.KeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ üìú"),
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–Ø –ª—é–±–ª—é —Ç–µ–±—è"
    )
    keyboard.add(types.KeyboardButton(text="–°—Ç–∏–∫–µ—Ä–ø–∞–∫ –≥—Ä—É–ø–ø—ã üòä"))
    keyboard.add(types.KeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –≥—Ä—É–ø–ø–µ –≤–∫–æ–Ω—Ç–∞–∫—Ç–µ üåê", url='https://vk.com/hlnaddo181411502'))
    await message.answer("–ù—É —á—Ç–æ, –ø—Ä–∏—Å—Ç—É–ø–∏–º üòç", reply_markup=keyboard)

    @dp.message_handler(text="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–µ—Å–µ–Ω üéµ")
    async def with_puree(message: types.Message):
        InlineKeyboardForTrack = types.InlineKeyboardMarkup(row_width=2)

        button1 = types.InlineKeyboardButton(text="TATAR11IN - INTRO", callback_data="TATAR11IN - INTRO")
        button2 = types.InlineKeyboardButton(text="TATAR11IN feat. WHATDISLUV - –ö–¢–û –î–û–ú–ê",
                                             callback_data="TATAR11IN feat. WHATDISLUV - –ö–¢–û –î–û–ú–ê")
        button3 = types.InlineKeyboardButton(text="TATAR11IN - –ë–õ–û–ö –ù–û–ú–ï–† 11",
                                             callback_data="TATAR11IN - –ë–õ–û–ö –ù–û–ú–ï–† 11")
        button4 = types.InlineKeyboardButton(text="TATAR11IN feat. WHATDISLUV - –†–ê–ú–ê",
                                             callback_data="TATAR11IN feat. WHATDISLUV - –†–ê–ú–ê")
        button5 = types.InlineKeyboardButton(text="TATAR11IN - –°–õ–£–ß–ê–ô–ù–û", callback_data="TATAR11IN - –°–õ–£–ß–ê–ô–ù–û")

        InlineKeyboardForTrack.add(button1)
        InlineKeyboardForTrack.add(button2)
        InlineKeyboardForTrack.add(button3)
        InlineKeyboardForTrack.add(button4)
        InlineKeyboardForTrack.add(button5)
        await message.answer("<b>–¢—É—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö –ø–µ—Å–µ–Ω,</b> –≤—ã–±–µ—Ä–∏ –∏ —è —Å–∫–∏–Ω—É —Ç–µ–±–µ —Ç–µ–∫—Å—Ç –∏ –ø–µ—Å–Ω—é",
                             reply_markup=InlineKeyboardForTrack, parse_mode="HTML")

    @dp.callback_query_handler(text="TATAR11IN - INTRO")
    async def send_music(call: types.CallbackQuery):
        await call.message.answer(f"üéßTATAR11IN - INTROüéß\n {AllTextMusic.AllText[0]}")
        audio = open(r'C:\Users\Guslik\Desktop\MyTelegramBot\music\TATAR11IN - INTRO.mp3', 'rb')
        await bot.send_audio(call.from_user.id, audio)
        audio.close()

    @dp.callback_query_handler(text="TATAR11IN feat. WHATDISLUV - –ö–¢–û –î–û–ú–ê")
    async def send_random_value(call: types.CallbackQuery):
        await call.message.answer(f"üéßTATAR11IN feat. WHATDISLUV - –ö–¢–û –î–û–ú–êüéß\n {AllTextMusic.AllText[1]}")
        audio = open(r'C:\Users\Guslik\Desktop\MyTelegramBot\music\TATAR11IN feat. WHATDISLUV - –ö–¢–û –î–û–ú–ê.mp3', 'rb')
        await bot.send_audio(call.from_user.id, audio)
        audio.close()

    @dp.callback_query_handler(text="TATAR11IN - –ë–õ–û–ö –ù–û–ú–ï–† 11")
    async def send_random_value(call: types.CallbackQuery):
        await call.message.answer(f"üéßTATAR11IN - –ë–õ–û–ö –ù–û–ú–ï–† 11üéß\n {AllTextMusic.AllText[2]}")
        audio = open(r'C:\Users\Guslik\Desktop\MyTelegramBot\music\TATAR11IN - –ë–õ–û–ö –ù–û–ú–ï–† 11.mp3', 'rb')
        await bot.send_audio(call.from_user.id, audio)
        audio.close()

    @dp.callback_query_handler(text="TATAR11IN feat. WHATDISLUV - –†–ê–ú–ê")
    async def send_random_value(call: types.CallbackQuery):
        await call.message.answer(f"üéßTATAR11IN feat. WHATDISLUV - –†–ê–ú–êüéß\n \n {AllTextMusic.AllText[3]}")

        audio = open(r'C:\Users\Guslik\Desktop\MyTelegramBot\music\TATAR11IN feat. WHATDISLUV - –†–ê–ú–ê.mp3', 'rb')
        await bot.send_audio(call.from_user.id, audio)
        audio.close()

    @dp.callback_query_handler(text="TATAR11IN - –°–õ–£–ß–ê–ô–ù–û")
    async def send_random_value(call: types.CallbackQuery):
        await call.message.answer(f"üéßTATAR11IN - –°–õ–£–ß–ê–ô–ù–ûüéß \n {AllTextMusic.AllText[4]}")
        audio = open(r'C:\Users\Guslik\Desktop\MyTelegramBot\music\TATAR11IN - –°–õ–£–ß–ê–ô–ù–û.mp3', 'rb')
        await bot.send_audio(call.from_user.id, audio)
        audio.close()

    @dp.message_handler(lambda message: message.text == "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã üë™")
    async def InfoMusician(message: types.Message):
        InlineKeyboardForMusician = types.InlineKeyboardMarkup(row_width=2)
        buttonKirill = types.InlineKeyboardButton(text="–ú–Ω–æ–≥–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π TATAR11IN üë∑", callback_data="TATAR11IN")
        buttonGuslik = types.InlineKeyboardButton(text="–ó–≤—É–∫–æ—Ä–µ–∂–∏—Å—Å–µ—Ä –ø–æ—Ä–Ω–æ Guslik üëΩ", callback_data="Guslik")
        buttonOstap = types.InlineKeyboardButton(text="–í–ª–∞–¥–µ–ª–µ—Ü —à–∞—É—Ä–º–∏—á–Ω–æ–π Ostap üíÇ", callback_data="Ostap")
        InlineKeyboardForMusician.add(buttonKirill)
        InlineKeyboardForMusician.add(buttonGuslik)
        InlineKeyboardForMusician.add(buttonOstap)

        await message.reply("–í—ã–±–µ—Ä–∏ –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –∏–∑ –Ω–∞—Å, —Ç–æ–ª—å–∫–æ –Ω–∏–∫–æ–º—É –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π —á—Ç–æ —Ç—ã —Å–µ–π—á–∞—Å —É–≤–∏–¥–∏—à—å, <b>—ç—Ç–æ —Ç–∞–π–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>", reply_markup=InlineKeyboardForMusician, parse_mode="HTML")

    @dp.callback_query_handler(text="TATAR11IN")
    async def send_music(call: types.CallbackQuery):
        await call.message.answer(f"üë∑TATAR11INüë∑\n {InformationAboutMusician.InfoAboutMusician[0]}")
        photoKirill = open(r'C:\Users\Guslik\Desktop\MyTelegramBot\Images\Kirill.jpg', 'rb')
        await bot.send_photo(call.from_user.id, photoKirill)
        photoKirill.close()

    @dp.callback_query_handler(text="Guslik")
    async def send_music(call: types.CallbackQuery):
        await call.message.answer(f"üëΩGusliküëΩ\n {InformationAboutMusician.InfoAboutMusician[1]}")
        photoGuslik = open(r'C:\Users\Guslik\Desktop\MyTelegramBot\Images\Guslik.jpg', 'rb')
        await bot.send_photo(call.from_user.id, photoGuslik)
        photoGuslik.close()

    @dp.callback_query_handler(text="Ostap")
    async def send_music(call: types.CallbackQuery):
        await call.message.answer(f"üíÇOstapüíÇ\n {InformationAboutMusician.InfoAboutMusician[2]}")
        photoOstap = open(r'C:\Users\Guslik\Desktop\MyTelegramBot\Images\Ostap.png', 'rb')
        await bot.send_photo(call.from_user.id, photoOstap)
        photoOstap.close()

    @dp.message_handler(lambda message: message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ üìú")
    async def without_puree(message: types.Message):
        await message.reply("–ù–∞—à–∞ –≥—Ä—É–ø–ø–∞ —Å–∞–º–∞—è –∫—Ä—É—Ç–∞—è, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∏–∫—Ç–æ –Ω–µ —Å–º–æ–∂–µ—Ç –ø–µ—Ä–µ–ø–µ—Ç—å –Ω–∞—Å –Ω–∞ –ª–∞–≤–∫–µ")

    @dp.message_handler(lambda message: message.text == "–°—Ç–∏–∫–µ—Ä–ø–∞–∫ –≥—Ä—É–ø–ø—ã üòä")
    async def without_puree(message: types.Message):
        await message.reply(
            "–°—Ç–µ–∫–µ—Ä–ø–∞–∫ Hule Naddo —ç—Ç–æ –ª—É—á—à–µ–µ, —á—Ç–æ –µ—Å—Ç—å –Ω–∞ —ç—Ç–æ–º —Å–≤–µ—Ç–µ, –ø–æ–ª—å–∑—É–π—Å—è –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ ‚ù§ \n https://t.me/addstickers/HULENADDO")

    @dp.message_handler(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –≥—Ä—É–ø–ø–µ –≤–∫–æ–Ω—Ç–∞–∫—Ç–µ üåê")
    async def with_puree(message: types.Message):
        await message.reply(
            "–ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –≥—Ä—É–ø–ø–µ, —Ç–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –±–∞—Ö–Ω—É—Ç—å –ø–∏–≤–∞ –Ω–∞ –ª–∞–≤–∫–µ üçª \n https://vk.com/hlnaddo181411502 üåê")



@dp.message_handler(commands=["ILoveBeer"])
async def cmd_answer(message: types.Message):
    await message.answer("–ö—Ä–∞—Å–∞–≤–∞ –ë—Ä–∞—Ç, –ø–∏–≤–æ –ª—É—á—à–µ–µ —á—Ç–æ –µ—Å—Ç—å –Ω–∞ —ç—Ç–æ–º —Å–≤–µ—Ç–µ")


@dp.message_handler(commands=["remove"])
async def cmd_dice(message: types.Message):
    if message.from_user.id == Id_First_Administrator:
        db.remove_all_users()
    await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    await message.answer_dice(emoji="üé≤")


@dp.message_handler(commands=["test"])
async def any_message(message: types.Message):
    await message.answer("Hello, <b>world</b>!", parse_mode="HTML")
    await message.answer("Hello, *world*\!", parse_mode="MarkdownV2")


@dp.message_handler(commands=["sendAll"])
async def send_all(messege: types.Message):
    if messege.chat.type == 'private':
        if messege.from_user.id == Id_First_Administrator:
            text = messege.text[9:]
            users = db.get_user()
            for row in users:
                try:
                    await bot.send_message(row[0], text)
                    if int(row[1]) != 1:
                        db.set_active(row[0], 1)
                except:
                    db.set_active(row[0], 0)
            await bot.send_message(messege.from_user.id, "–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

@dp.message_handler(commands=["playGame"])
async def game_handler(messege: types.Message):
    game_rating = db.get_game_rating(messege.from_user.id)
    new_game_rating = db.set_game_rating(messege.from_user.id, game_rating+1)
    await bot.send_message(messege.from_user.id, f"–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ {game_rating}")


@dp.message_handler(commands=["defaultGame"])
async def default_game_handler(messege: types.Message):
     db.set_default_game_rating()
     await bot.send_message(messege.from_user.id, "–†–µ–π—Ç–∏–Ω–≥ –æ–±–Ω–∞–≤–ª–µ–Ω ")

if __name__ == '__main__':
    executor.start_polling(dp)



